version: "3.9"

services:
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - 16379:6379
    volumes:
      - ./data/Redis/redis:/root/redis
      - ./data/Redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: 12369
      # - REDIS_PORT: 6379
      # - REDIS_DATABASES: 16

  mysqlsrv:
    image: mysql:8.0.33
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12369
      MYSQL_DATABASE: "rpg"
    ports:
      - 3306:3306
    volumes:
      - ./data/MySql:/var/lib/mysql

  mongo:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 12369
    ports:
      - 27017:27017
    volumes:
      - ./data/MongoDB:/data/db

  postgres:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: 12369
    ports:
      - 15432:5432
    volumes:
      - ./data/PostgreSQL:/var/lib/postgresql/data

  redpanda-0:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.9
    container_name: redpanda-0
    restart: unless-stopped
    user: root
    volumes:
      - ./data/redpanda-0:/var/lib/redpanda/data
    command:
      # https://docs.redpanda.com/21.11/cluster-administration/configuration/
      - redpanda start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 1G
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # enable logs for debugging.
      - --default-log-level=debug
      - --set redpanda.enable_idempotence=true
      - --set redpanda.enable_transactions=true
      - --set redpanda.auto_create_topics_enabled=true
      - --overprovisioned
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  redpanda-1:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.9
    container_name: redpanda-1
    restart: unless-stopped
    user: root
    volumes:
      - ./data/redpanda-1:/var/lib/redpanda/data
    command:
      - redpanda start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:29092
      - --advertise-kafka-addr internal://redpanda-1:9092,external://localhost:29092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:28082
      - --advertise-pandaproxy-addr internal://redpanda-1:8082,external://localhost:28082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:28081
      - --rpc-addr redpanda-1:33145
      - --advertise-rpc-addr redpanda-1:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=debug
      - --seeds redpanda-0:33145
      - --set redpanda.enable_idempotence=true
      - --set redpanda.enable_transactions=true
      - --set redpanda.auto_create_topics_enabled=true
      - --overprovisioned
    ports:
      - 28081:28081
      - 28082:28082
      - 29092:29092
      - 29644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      - redpanda-0

  redpanda-2:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.9
    container_name: redpanda-2
    restart: unless-stopped
    user: root
    volumes:
      - ./data/redpanda-2:/var/lib/redpanda/data
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:39092
      - --advertise-kafka-addr internal://redpanda-2:9092,external://localhost:39092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:38082
      - --advertise-pandaproxy-addr internal://redpanda-2:8082,external://localhost:38082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:38081
      - --rpc-addr redpanda-2:33145
      - --advertise-rpc-addr redpanda-2:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
      - --default-log-level=debug
      - --seeds redpanda-0:33145
      - --set redpanda.enable_idempotence=true
      - --set redpanda.enable_transactions=true
      - --set redpanda.auto_create_topics_enabled=true
      - --overprovisioned
    ports:
      - 38081:38081
      - 38082:38082
      - 39092:39092
      - 39644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      - redpanda-0

  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.3.3
    restart: unless-stopped
    user: root
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092","redpanda-1:9092","redpanda-2:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
          protobuf:
            enabled: true
            schemaRegistry:
              enabled: true
              refreshInterval: 5m
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
        connect:
          enabled: true
          clusters:
            - name: connect-cluster-group
              url: http://connect:8083
    ports:
      - 8080:8080
    depends_on:
      - redpanda-0
      - redpanda-1
      - redpanda-2
      - connect

  timescaledb:
    image: timescale/timescaledb:latest-pg13
    restart: unless-stopped
    ports:
      - 15433:5432
    environment:
      POSTGRES_USER: timescaledb
      POSTGRES_PASSWORD: 12369
    volumes:
      - /data/timescaledb:/var/lib/postgresql/data

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.25.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    restart: unless-stopped
    depends_on:
      - redpanda-0
      - redpanda-1
      - redpanda-2
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "redpanda-0:9092"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: http://connect:8083

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.25.1
    container_name: ksqldb-cli
    restart: unless-stopped
    depends_on:
      - redpanda-0
      - redpanda-1
      - redpanda-2
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  connect:
    # image: confluentinc/cp-kafka-connect:7.5.0
    build:
      context: .
      dockerfile: kafka-connect.dockerfile
    user: root
    restart: unless-stopped
    volumes:
      - ./data/connect/java:/usr/share/confluent-hub-components
    depends_on:
      - redpanda-0
      - redpanda-1
      - redpanda-2
    ports:
      - "8083:8083"
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.11.0
        confluent-hub install --no-prompt debezium/debezium-connector-mongodb:2.2.1
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.2.1 
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:2.2.1
        confluent-hub install --no-prompt debezium/debezium-connector-sqlserver:2.2.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-azure-blob-storage-source:2.5.7
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:14.0.10
        confluent-hub install --no-prompt dariobalinzo/kafka-connect-elasticsearch-source:1.5.5
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.4
        confluent-hub install --no-prompt confluentinc/kafka-connect-rabbitmq-sink:1.7.9
        confluent-hub install --no-prompt confluentinc/kafka-connect-mqtt:1.7.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-rabbitmq:1.7.9
        confluent-hub install --no-prompt confluentinc/kafka-connect-azure-blob-storage:1.6.16
        confluent-hub install --no-prompt jcustenborder/kafka-connect-redis:0.0.5
        confluent-hub install --no-prompt confluentinc/kafka-connect-json-schema-converter:7.5.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-avro-converter:7.5.0
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    environment:
      CONNECT_BOOTSTRAP_SERVERS: redpanda-0:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/etc/connect-jars
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://redpanda-0:8081'

